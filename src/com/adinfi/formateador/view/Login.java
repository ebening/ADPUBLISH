package com.adinfi.formateador.view;

import com.adinfi.formateador.main.MainView;
import com.adinfi.formateador.view.*;
import com.adinfi.formateador.util.ApplicationProperties;
import com.adinfi.formateador.util.GlobalDefines;
import com.adinfi.formateador.util.InstanceContext;
import com.adinfi.formateador.util.StringEncrypter;
import com.adinfi.formateador.util.Utilerias;
import com.adinfi.formateador.util.UtileriasWS;
import com.adinfi.ws.Access_Impl;
import com.adinfi.ws.IAccess_Stub;
import com.adinfi.ws.Usuario;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.rmi.RemoteException;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;

/**
 *
 * @author Guillermo Trejo
 */
public class Login extends JDialog {

    private transient LogginWorker logginWorker;
    private String user;
    private Usuario usuario;
    private boolean access = false;

    /**
     * Creates new form LoginDialog
     *
     * @param parent
     * @param modal
     */
    public Login(java.awt.Frame parent, boolean modal) {
        super(parent, ModalityType.TOOLKIT_MODAL);
        initComponents();
        setModal(modal);
        progressBar.setVisible(false);
    }

    public boolean readSettings() {
        boolean remeberPass = false;
        try {
            Properties p = Utilerias.getPasswordFile();

            if (String.valueOf(p.get(GlobalDefines.LOGIN_COOKIE_SAVED_PASS)).equals("1")) {
                remeberPass = true;
            }
            String user_ = p.getProperty(GlobalDefines.LOGIN_COOKIE_USER);
            String pass_ = p.getProperty(GlobalDefines.LOGIN_COOKIE_PASS);

            /*
            String decryptUser = StringEncrypter.decryptDES(user_);
            String decryptPass = StringEncrypter.decryptDES(pass_);
            */
            
            String decryptUser = new String(StringEncrypter.decryptAES(user_.getBytes()));
            String decryptPass = new String(StringEncrypter.decryptAES(pass_.getBytes()));
            
            rememberPasswordCheck.setSelected(remeberPass);
            txtUser.setText(decryptUser);
            txtPass.setText(decryptPass);

        } catch (Exception ex) {
            Utilerias.logger(getClass()).info(ex);
        }
        return remeberPass;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblUser = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        lblPass = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        txtPass = new javax.swing.JPasswordField();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        rememberPasswordCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblUser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUser.setText("Usuario");

        txtUser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserKeyPressed(evt);
            }
        });

        lblPass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPass.setText("Contraseña");

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOk.setText("Aceptar");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPassKeyPressed(evt);
            }
        });

        progressBar.setIndeterminate(true);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/170x38px_Logo Vector Analisis.png"))); // NOI18N

        rememberPasswordCheck.setText("Recordar contraseña");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPass, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUser)
                            .addComponent(txtPass)
                            .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rememberPasswordCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPass)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel)
                    .addComponent(rememberPasswordCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        loginAction();
        
    }//GEN-LAST:event_btnOkActionPerformed

    private void txtPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loginAction();
        }
    }//GEN-LAST:event_txtPassKeyPressed

    private void txtUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtPass.requestFocus();
        }
    }//GEN-LAST:event_txtUserKeyPressed

    public void loginAction() {
        char passArray[] = txtPass.getPassword();
        if ((txtUser.getText() == null || txtUser.getText().trim().isEmpty()) == true
                || (passArray == null || passArray.length == 0) == true) {
            JOptionPane.showMessageDialog(this, "Las credenciales son incorrectas.");
            return;
        }
        String u = "vectoran";
        String p = "tescatlipocatl";
        try {
            progressBar.setVisible(true);
            logginWorker = new LogginWorker(u, p, progressBar, this);
            logginWorker.execute();
        } catch (HeadlessException ex) {
            Utilerias.logger(getClass()).error(ex);
        }
    }

    /**
     * @return the txtPass
     */
    public javax.swing.JPasswordField getTxtPass() {
        return txtPass;
    }

    /**
     * @param txtPass the txtPass to set
     */
    public void setTxtPass(javax.swing.JPasswordField txtPass) {
        this.txtPass = txtPass;
    }

    /**
     * @return the txtUser
     */
    public javax.swing.JTextField getTxtUser() {
        return txtUser;
    }

    /**
     * @param txtUser the txtUser to set
     */
    public void setTxtUser(javax.swing.JTextField txtUser) {
        this.txtUser = txtUser;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblUser;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JCheckBox rememberPasswordCheck;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the user
     */
    public String getUser() {
        return user;
    }

    /**
     * @param user the user to set
     */
    public void setUser(String user) {
        this.user = user;
    }

    /**
     * @return the usuario
     */
    public Usuario getUsuario() {
        return usuario;
    }

    /**
     * @param usuario the usuario to set
     */
    public void setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }

    /**
     * @return the access
     */
    public boolean isAccess() {
        return access;
    }

    /**
     * @param access the access to set
     */
    public void setAccess(boolean access) {
        this.access = access;
    }

    class LogginWorker extends SwingWorker<Usuario, Usuario> {

        private Exception exception;
        private final String user;
        private final String pass;
        private final JProgressBar bar;
        private final JDialog parent;
        private Usuario usuario_;

        LogginWorker(final String user, final String pass, final JProgressBar bar, JDialog parent) {
            this.bar = bar;
            this.user = user;
            this.pass = pass;
            this.parent = parent;
            this.usuario_ = null;
        }

        @Override
        protected Usuario doInBackground() {
            try {
                IAccess_Stub stub = (IAccess_Stub) new Access_Impl().getBasicHttpBinding_IAccess();
                UtileriasWS.setEndpoint(stub);
                //stub._setProperty(javax.xml.rpc.Stub.ENDPOINT_ADDRESS_PROPERTY, "http://");
                this.usuario_ = stub.autentificarPlain(GlobalDefines.WS_INSTANCE, user, pass);
                
            } catch (RemoteException ex) {
                JOptionPane.showMessageDialog(null, "El servicio de autentificación no esta disponible.", "Inane error", JOptionPane.ERROR_MESSAGE);
                exception = ex;
                Utilerias.logger(getClass()).info(ex);
            }
            return this.usuario_;
        }

        @Override
        protected void done() {
            try {
                usuario = get();
            } catch (InterruptedException | ExecutionException ex) {
                Utilerias.logger(getClass()).error(ex);
                exception = ex;
                usuario = null;

            } finally {
                bar.setVisible(false);
                InstanceContext.getInstance().setUsuario(usuario);
                if (usuario == null) {
                    showErrorMessage(exception.getMessage().contains("HTTP transport error") || exception == null ?  "Error de conexión" : "El Usuario de red o contraseña son incorrectos");
                    setVisible(true);
                } else {
                    rememberPassword(user, pass);
                    dispose();
                }
            }
        }

        private void showErrorMessage(String message) {
            JOptionPane.showMessageDialog(
                    parent,
                    message,
                    Utilerias.getProperty(ApplicationProperties.APP_TITLE),
                    JOptionPane.ERROR_MESSAGE, new ImageIcon(Utilerias.getImage(Utilerias.ICONS.APP_RIBBON_ICON)));
        }
    }

    public void rememberPassword(String u, String p) {
        try {
            if (rememberPasswordCheck.isSelected() == false) {
                return;
            }
            Properties properties = Utilerias.getPasswordFile();

            /*
            String encryptUser = StringEncrypter.encryptDES(u);
            String encryptPass = StringEncrypter.encryptDES(p);
            */
            
            String encryptUser = new String(StringEncrypter.encryptAES(u));
            String encryptPass = new String(StringEncrypter.encryptAES(p));
            
            properties.put(GlobalDefines.LOGIN_COOKIE_SAVED_PASS, "1");
            properties.put(GlobalDefines.LOGIN_COOKIE_USER, encryptUser);
            properties.put(GlobalDefines.LOGIN_COOKIE_PASS, encryptPass);
            Utilerias.savePasswordFile(properties);

        } catch (Exception e) {
            Utilerias.logger(getClass()).info(e);
        }
    }

}
