package com.adinfi.formateador.view;

import com.adinfi.formateador.bos.DocumentTypeBO;
import com.adinfi.formateador.bos.TemplateBO;
import com.adinfi.formateador.dao.TemplateDAO;
import com.adinfi.formateador.main.MainView;
import com.adinfi.formateador.util.GlobalDefines;
import com.adinfi.formateador.util.ThumbTemplate;
import com.adinfi.formateador.util.Utilerias;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import org.pushingpixels.flamingo.api.common.popup.JPopupPanel;

/**
 *
 * @author Guillermo Trejo
 */
public final class PanelPlantillasTodas extends JPopupPanel {

    private final ScrDocument scrDocument;
    private List<PanelThumbTodos> panelThumbTodoses = new ArrayList<>();
    private List<Integer> selectedLst= new ArrayList<>();
    private PanelPlantillasTodas.PopulatePanelWorker worker = new PanelPlantillasTodas.PopulatePanelWorker();
    private String filtroStr= "";
    private DocumentTypeBO type;
    private List<DocumentTypeBO> typesList= new ArrayList<>();
    
    public List<Integer> getSelectedLst() {
        return selectedLst;
    }

    public void setSelectedLst(List<Integer> selectedLst) {
        this.selectedLst = selectedLst;
    }
    
    public PanelPlantillasTodas(List<Integer> selectedLst, List<DocumentTypeBO> typesList){
        this.scrDocument = MainView.main.getScrDocument();
        initComponents();
        this.selectedLst= selectedLst;
        this.typesList= typesList;
        populatePanel();
    }
    
    public PanelPlantillasTodas() {
        this.scrDocument = MainView.main.getScrDocument();
        initComponents();
        populatePanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrollPanel = new javax.swing.JScrollPane();
        panelThumbTempl = new javax.swing.JPanel();
        jFiltro = new javax.swing.JTextField();
        jBuscar = new javax.swing.JButton();
        jTypesDocument = new javax.swing.JComboBox();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();

        setMinimumSize(new java.awt.Dimension(600, 140));
        setPreferredSize(new java.awt.Dimension(600, 140));
        setLayout(new java.awt.GridBagLayout());

        scrollPanel.setAutoscrolls(true);
        scrollPanel.setMinimumSize(new java.awt.Dimension(400, 320));
        scrollPanel.setName(""); // NOI18N
        scrollPanel.setPreferredSize(new java.awt.Dimension(400, 320));

        panelThumbTempl.setAutoscrolls(true);
        panelThumbTempl.setMinimumSize(new java.awt.Dimension(400, 320));
        panelThumbTempl.setPreferredSize(new java.awt.Dimension(400, 320));
        scrollPanel.setViewportView(panelThumbTempl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -270;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 19, 20);
        add(scrollPanel, gridBagConstraints);

        jFiltro.setMaximumSize(new java.awt.Dimension(150, 20));
        jFiltro.setMinimumSize(new java.awt.Dimension(150, 20));
        jFiltro.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jFiltro, gridBagConstraints);

        jBuscar.setText("Buscar");
        jBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuscarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        add(jBuscar, gridBagConstraints);

        jTypesDocument.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todas" }));
        jTypesDocument.setToolTipText("");
        jTypesDocument.setMinimumSize(new java.awt.Dimension(150, 22));
        jTypesDocument.setPreferredSize(new java.awt.Dimension(150, 22));
        jTypesDocument.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTypesDocumentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jTypesDocument, gridBagConstraints);

        label1.setText("Tipo de documento");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        add(label1, gridBagConstraints);

        label2.setMinimumSize(new java.awt.Dimension(110, 20));
        label2.setPreferredSize(new java.awt.Dimension(110, 20));
        label2.setText("Nombre");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        add(label2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuscarActionPerformed
        filtroStr= jFiltro.getText();
        if(jTypesDocument.getSelectedItem() instanceof DocumentTypeBO){
            type= (DocumentTypeBO)jTypesDocument.getSelectedItem();
        }else{
            type= null;
        }
        panelThumbTempl.removeAll();
        panelThumbTodoses= new ArrayList<>();
        panelThumbTempl.repaint();
        worker.doInBackground();
        panelThumbTempl.revalidate();
        int modulo= (panelThumbTempl.getComponentCount()/4)+2;
        panelThumbTempl.setPreferredSize(new Dimension(3*PanelThumbTodos.DEFAULT_WIDTH_PANEL_SIZE,modulo*PanelThumbTodos.DEFAULT_HEIGHT_PANEL_SIZE));
        panelThumbTempl.setAutoscrolls(true);
    }//GEN-LAST:event_jBuscarActionPerformed

    private void jTypesDocumentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTypesDocumentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTypesDocumentActionPerformed

    protected void populatePanel() {
//        MainView.main.getProgressBar().setIndeterminate(true);
//        MainView.main.getProgressBar().setVisible(true);
        worker.doInBackground();
        panelThumbTempl.revalidate();
        int modulo= (panelThumbTempl.getComponentCount()/4)+1;
        panelThumbTempl.setPreferredSize(new Dimension(3*PanelThumbTodos.DEFAULT_WIDTH_PANEL_SIZE,modulo*PanelThumbTodos.DEFAULT_HEIGHT_PANEL_SIZE));
        for(DocumentTypeBO type: typesList){
            jTypesDocument.addItem(type);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBuscar;
    private javax.swing.JTextField jFiltro;
    private javax.swing.JComboBox jTypesDocument;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JPanel panelThumbTempl;
    private javax.swing.JScrollPane scrollPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the panelThumbTodoses
     */
    public List<PanelThumbTodos> getPanelThumbTodoses() {
        return panelThumbTodoses;
    }

    /**
     * @return the scrDocument
     */
    public ScrDocument getScrDocument() {
        return scrDocument;
    }

    class PopulatePanelWorker {
        protected TemplateBO doInBackground() {
            try {
                TemplateDAO tempDAO = new TemplateDAO();
                final List<TemplateBO> lstTempBO = tempDAO.getTemplates();
                if (lstTempBO == null) {
                    return null;
                }
                for (final TemplateBO tempBO : lstTempBO) {
                    if (tempBO == null) {
                        continue;
                    }
                    
                    String fileName
                            = new StringBuilder(Utilerias.getFilePath(Utilerias.PATH_TYPE.THUMB_TEMPLATE_DIR))
                            .append(tempBO.getTemplateId())
                            .append(".")
                            .append(GlobalDefines.png).toString();

                    tempBO.setTemplatePath(fileName);
                    if(filtroStr!=null&&filtroStr.trim().length()>0){
                        if(tempBO.getTemplateName().toUpperCase().contains(filtroStr.toUpperCase())){
                            process(tempBO);
                        }
                    }else{
                        process(tempBO);
                    }
                }
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
            return null;
        }

        public void process(TemplateBO tempBO) {
            if (tempBO == null) {
                return;
            }
            try {
                boolean bSelected= false;
                if(type!=null&&type.getTemplates()!=null&&!type.getTemplates().contains(tempBO.getTemplateId())){
                    return;
                }
                if(selectedLst.contains(tempBO.getTemplateId())){
                    bSelected=true;
                }
                PanelThumbTodos pan = new PanelThumbTodos(
                        tempBO.getTemplateId(),
                        PanelThumbTodos.DEFAULT_WIDTH_PANEL_SIZE,
                        PanelThumbTodos.DEFAULT_HEIGHT_PANEL_SIZE,
                        tempBO.getTemplatePath(),
                        tempBO.getTemplateName());
                pan.setChecked(bSelected);
                panelThumbTempl.add(pan);
                getPanelThumbTodoses().add(pan);
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
        }
    }

    public List<DocumentTypeBO> getTypesList() {
        return typesList;
    }

    public void setTypesList(List<DocumentTypeBO> typesList) {
        this.typesList = typesList;
    }

}
