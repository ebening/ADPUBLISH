package com.adinfi.formateador.view;

import com.adinfi.formateador.bos.ModuleBO;
import com.adinfi.formateador.dao.TemplateDAO;
import com.adinfi.formateador.main.MainView;
import com.adinfi.formateador.util.GlobalDefines;
import com.adinfi.formateador.util.ThumbTemplate;
import com.adinfi.formateador.util.Utilerias;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.pushingpixels.flamingo.api.common.popup.JPopupPanel;

/**
 *
 * @author Guillermo Trejo
 */
public final class PanelModulos extends JPopupPanel {

    private final ScrDocument scrDocument;

    /**
     * Creates new form PanelPlantillas
     *
     */
    public PanelModulos() {
        this.scrDocument = MainView.main.getScrDocument();
        initComponents();
        populatePanel();
    }

    protected void populatePanel() {
        MainView.main.getProgressBar().setIndeterminate(true);
        MainView.main.getProgressBar().setVisible(true);
        PopulatePanelWorker worker = new PopulatePanelWorker();
        worker.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanel = new javax.swing.JScrollPane();
        panThumbMod = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(550, 140));
        setPreferredSize(new java.awt.Dimension(550, 140));
        setLayout(new java.awt.BorderLayout());

        scrollPanel.setMinimumSize(new java.awt.Dimension(550, 140));
        scrollPanel.setPreferredSize(new java.awt.Dimension(550, 140));

        panThumbMod.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        scrollPanel.setViewportView(panThumbMod);

        add(scrollPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panThumbMod;
    private javax.swing.JScrollPane scrollPanel;
    // End of variables declaration//GEN-END:variables

    class PopulatePanelWorker extends SwingWorker<ModuleBO, ModuleBO> {

        PopulatePanelWorker() {
        }

        @Override
        protected ModuleBO doInBackground() {
            try {
                //
                TemplateDAO tempDAO = new TemplateDAO();
                List<ModuleBO> lstModules = tempDAO.getModules();

                for (ModuleBO moduleBO : lstModules) {
                    String fileName
                            = new StringBuilder(Utilerias.getFilePath(Utilerias.PATH_TYPE.THUMB_MODULE_DIR))
                            .append(moduleBO.getModuleId())
                            .append(".")
                            .append(GlobalDefines.png).toString();
                    moduleBO.setTemplatePath(fileName);
                    publish(moduleBO);

                }
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
            return null;
        }

        @Override
        public void process(List<ModuleBO> chunks) {
            if (chunks == null) {
                return;
            }
            try {
                for (int i = 0; i < chunks.size(); i++) {
                    try {
                        final ModuleBO modBO = chunks.get(i);

                        PanelThumb pan = new PanelThumb(modBO.getModuleId(), PanelThumb.DEFAULT_WIDTH_PANEL_SIZE, PanelThumb.DEFAULT_HEIGHT_PANEL_SIZE, modBO.getTemplatePath(), modBO.getName());
                        pan.getButton().addMouseListener(new MouseAdapter() {

                            @Override
                            public void mouseClicked(MouseEvent me) {
                                if (me.getClickCount() == 2){//GlobalDefines.DEFAULT_CLICK_COUNT) {
                                    try {
                                        MainView.main.getProgressBar().setIndeterminate(true);
                                        MainView.main.getProgressBar().setVisible(true);
                                        AddModulesWorker worker = new AddModulesWorker(modBO);
                                        worker.execute();
                                    } catch (Exception ex) {
                                        Utilerias.logger(getClass()).info(ex);
                                    }
                                }
                            }
                        });
                        panThumbMod.add(pan);
                        pan.getButton().revalidate();
                    } catch (Exception ex) {
                        Utilerias.logger(getClass()).error(ex);
                    }
                }
                
                
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
        }

        @Override
        protected void done() {
            
            try {
                PanelRefreshThumb prt = new PanelRefreshThumb();
                prt.getButton().addMouseListener(new MouseAdapter() {
                    
                    @Override
                    public void mouseClicked(MouseEvent me) {
                        if (me.getClickCount() == GlobalDefines.DEFAULT_CLICK_COUNT) {
                            try {
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        MainView.main.getProgressBar().setVisible(true);
                                    }
                                });
                                
                                TemplateDAO tDAO = new TemplateDAO();
                                List<ModuleBO> lstMod = tDAO.getModules();
                                for (ModuleBO mod : lstMod) {
                                    ModuleBO modBO = tDAO.getModule(mod.getModuleId());
                                    
                                    if(modBO == null)
                                        continue;
                                    
                                    ThumbTemplate thTemp = new ThumbTemplate();
                                    
                                    short hres = 30;
                                    if (modBO.getHeight() > 350) {
                                        hres = 90;
                                    }

                                    thTemp.genThumbModule(modBO.getModuleId(), (short) 90, hres, "");
                                    thTemp.genThumbModule(modBO.getModuleId(), modBO.getWidth(), modBO.getHeight(), "_B");
                                }
                                
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        try {
                                            while (panThumbMod.getComponentCount() > 1) {                                    
                                                panThumbMod.remove(0);
                                            }
                                            panThumbMod.revalidate();
                                            panThumbMod.updateUI();
                                                                                        
                                            PopulatePanelRedrawWorker workerRD = new PopulatePanelRedrawWorker();
                                            MainView.main.getProgressBar().setVisible(true);
                                            MainView.main.getProgressBar().setIndeterminate(true);
                                            workerRD.execute();
                                            
                                        } catch (Exception ex) {
                                            Utilerias.logger(getClass()).error(ex);
                                        }
                                    }
                                });
                            } catch (Exception ex) {
                                Utilerias.logger(getClass()).info(ex);
                            } finally {
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        MainView.main.getProgressBar().setVisible(false);
                                    }
                                });
                            }
                        }
                    }
                });
                panThumbMod.add(prt);
                panThumbMod.revalidate();
                panThumbMod.updateUI();
            } catch (Exception e) {
            } finally {
                MainView.main.getProgressBar().setVisible(false);
            }
            
                
            //MainView.main.get
        }
    }

    class AddModulesWorker extends SwingWorker<Integer, Integer> {

        protected Exception ex;
        protected ModuleBO modBO;

        AddModulesWorker(ModuleBO modBO) {
            this.modBO = modBO;
        }

        @Override
        protected Integer doInBackground() {
            int moduleId = modBO.getModuleId();
            publish(moduleId);
            return null;
        }

        @Override
        public void process(List<Integer> chunks) {
            if (chunks == null) {
                return;
            }
            for (Integer i : chunks) {
                try {
                    if( !scrDocument.addModule(i, 0) )
                        break;
                } catch (UnsupportedOperationException e) {
                    this.ex = e;
                    break;
                }
            }
            MainView.main.getMainPanel().updateUI();
        }

        @Override
        protected void done() {
            MainView.main.getProgressBar().setVisible(false);
            if (this.ex != null) {
                Utilerias.showMessage(MainView.main, ex.getMessage(), JOptionPane.WARNING_MESSAGE);
                Utilerias.logger(getClass()).info(ex);
            } else {
                // MainView.main.setDocument(scrDocument);
            }
        }
    }
    
    class PopulatePanelRedrawWorker extends SwingWorker<ModuleBO, ModuleBO> {

        PopulatePanelRedrawWorker() {
        }

        @Override
        protected ModuleBO doInBackground() {
            try {
                //
                TemplateDAO tempDAO = new TemplateDAO();
                List<ModuleBO> lstModules = tempDAO.getModules();

                for (ModuleBO moduleBO : lstModules) {
                    String fileName
                            = new StringBuilder(Utilerias.getFilePath(Utilerias.PATH_TYPE.THUMB_MODULE_DIR))
                            .append(moduleBO.getModuleId())
                            .append(".")
                            .append(GlobalDefines.png).toString();
                    moduleBO.setTemplatePath(fileName);
                    publish(moduleBO);

                }
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
            return null;
        }

        @Override
        public void process(List<ModuleBO> chunks) {
            if (chunks == null) {
                return;
            }
            try {
                for (int i = 0; i < chunks.size(); i++) {
                    try{
                        final ModuleBO modBO = chunks.get(i);

                        PanelThumb pan = new PanelThumb(modBO.getModuleId(), PanelThumb.DEFAULT_WIDTH_PANEL_SIZE, PanelThumb.DEFAULT_HEIGHT_PANEL_SIZE, modBO.getTemplatePath(), modBO.getName());
                        pan.getButton().addMouseListener(new MouseAdapter() {

                            @Override
                            public void mouseClicked(MouseEvent me) {
                                if (me.getClickCount() == 2){//GlobalDefines.DEFAULT_CLICK_COUNT) {
                                    try {
                                        MainView.main.getProgressBar().setIndeterminate(true);
                                        MainView.main.getProgressBar().setVisible(true);
                                        AddModulesWorker worker = new AddModulesWorker(modBO);
                                        worker.execute();
                                    } catch (Exception ex) {
                                        Utilerias.logger(getClass()).info(ex);
                                    }
                                }
                            }
                        });
                        panThumbMod.add(pan, i);
                        pan.getButton().revalidate();
                    } catch (Exception ex) {
                        Utilerias.logger(getClass()).error(ex);
                    }
                }
                panThumbMod.revalidate();
                panThumbMod.updateUI();
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
        }

        @Override
        protected void done() {
            //MainView.main.getProgressBar().setVisible(false);
        }
    }

}
