package com.adinfi.formateador.view;

import com.adinfi.formateador.bos.DocumentBO;
import com.adinfi.formateador.bos.SemanarioDocsBO;
import com.adinfi.formateador.dao.DocumentDAO;
import com.adinfi.formateador.main.MainView;
import com.adinfi.formateador.util.GlobalDefines;
import com.adinfi.formateador.util.Utilerias;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author USUARIO
 */
public class BusquedaDialog extends javax.swing.JDialog {

    int tipo = 0;
    /**
     * Creates new form BusquedaDialog
     * @param parent
     */  
    public BusquedaDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        jButton1.setFocusable(true);
        Utilerias.addEscapeListener(this);
        setTitle(GlobalDefines.TITULO_APP);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(563, 302));

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        mainTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Nombre del documento");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buscarDocumentos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            buscarDocumentos();
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainTableMouseClicked
        JTable table = (JTable) evt.getSource();
        Point p = evt.getPoint();
        int row = table.rowAtPoint(p);
        if (evt.getClickCount() == 2) {
            int idDocument = mainTable.getModel().getValueAt(row, 0) == null ? -1
                    : Integer.parseInt(String.valueOf(mainTable.getModel().getValueAt(row, 0)));
            String nombre = mainTable.getModel().getValueAt(row, 2) == null ? ""
                    : String.valueOf(mainTable.getModel().getValueAt(row, 2));

            int result = JOptionPane.showConfirmDialog(this, "¿Abrir el documento con nombre\n" + nombre + "?", GlobalDefines.TITULO_APP, JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    agregarBusqueda(idDocument, nombre);
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    
                    //TODO modificar para nueva version
                   MainView.main.setDocument(idDocument, nombre);
                } catch (Exception ex) {
                    Utilerias.logger(getClass()).info(ex);
                } finally {
                    this.setCursor(Cursor.getDefaultCursor());
                    dispose();
                }
            }
        }
    }//GEN-LAST:event_mainTableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextField1.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void agregarBusqueda(int idDocument, String nombre) {
        try {
            Properties p = Utilerias.getSettingsFile();
            if (p == null) {
                return;
            }
            //Buscar si ya existe el documento regresar
            if (p.keySet().contains(String.valueOf(idDocument))) {
                return;
            }
            p.setProperty(String.valueOf(idDocument), nombre);
            Utilerias.saveSettingsFile(p);
            
            //TODO modificar para nueva version
            //MainView.main.refres main.refrescarRecientes();
        } catch (Exception e) {
        }
    }

    private void buscarDocumentos() {
        try {
            String text = jTextField1.getText();
            if (text == null || text.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese texto a buscar", "Formateador", JOptionPane.WARNING_MESSAGE);
                return;
            }
            DocumentDAO dao = new DocumentDAO();
            List<DocumentBO> list = dao.getDocumentsByName(text,false);

            CustomSearchModelDocumento customModel = new CustomSearchModelDocumento(list);
            mainTable.setModel(customModel);
            mainTable.removeColumn(mainTable.getColumnModel().getColumn(0));

            /* Ajustar columnas de la tabla */
            Utilerias.adjustJTableRowSizes(mainTable);
            for (int i = 0; i < mainTable.getColumnCount(); i++) {
                Utilerias.adjustColumnSizes(mainTable, i, 4);
            }
        } catch (HeadlessException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable mainTable;
    // End of variables declaration//GEN-END:variables

}

class CustomSearchModelDocumento extends AbstractTableModel {

    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
    static final Integer COLUMN_COUNT = 4;

    List<DocumentBO> list;

    public CustomSearchModelDocumento(List<DocumentBO> list) {
        this.list = list;
    }

    @Override
    public int getRowCount() {
        return list != null ? list.size() : 0;
    }

    @Override
    public int getColumnCount() {
        return COLUMN_COUNT;
    }

    @Override
    public String getColumnName(int column) {
        String name = "??";
        switch (column) {
            case 0:
                name = "id";
                break;
            case 1:
                name = "Nombre del archivo";
                break;
            case 2:
                name = "Nombre del documento";
                break;
            case 3:
                name = "Fecha del documento";
                break;
        }
        return name;
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        Class type = String.class;
        switch (columnIndex) {
            case 0:
                type = Integer.class;
                break;
            case 1:
            case 2:
            case 3:
                type = String.class;
                break;
        }
        return type;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        DocumentBO doc = list.get(rowIndex);
        Object value = null;
        switch (columnIndex) {
            case 0:
                value = Integer.valueOf(doc.getDocumentId());
                break;
            case 1:
                value = doc.getFileName();
                break;
            case 2:
                value = doc.getDocumentName();
                break;
            case 3:
                value = format.format(doc.getFecha());
                break;
        }
        return value;
    }

}

class CustomSearchModelSemanario extends AbstractTableModel {

    DocumentDAO dao = new DocumentDAO();
    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
    static final Integer COLUMN_COUNT = 3;

    List<SemanarioDocsBO> list;

    public CustomSearchModelSemanario(List<SemanarioDocsBO> list) {
        this.list = list;
    }

    @Override
    public int getRowCount() {
        return list != null ? list.size() : 0;
    }

    @Override
    public int getColumnCount() {
        return COLUMN_COUNT;
    }

    @Override
    public String getColumnName(int column) {
        String name = "??";
        switch (column) {
            case 0:
                name = "id";
                break;
            case 1:
                name = "Nombre del semanario";
                break;
            case 2:
                name = "Fecha del semanario";
                break;
//            case 3:
//                name = "Documentos";
//                break;
        }
        return name;
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        Class type = String.class;
        switch (columnIndex) {
            case 0:
                type = Integer.class;
                break;
            case 1:
            case 2:
                type = String.class;
                break;
//            case 3:
//                type = String.class;
//                break;
        }
        return type;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        SemanarioDocsBO doc = list.get(rowIndex);

        Object value = null;
        switch (columnIndex) {
            case 0:
                value = Integer.valueOf(doc.getIdSemanario());
                break;
            case 1:
                value = doc.getNombreSemanario();
                break;
            case 2:
                value = format.format(doc.getFecha());
                break;
//            case 3:
//                StringBuilder sb = new StringBuilder("");
//                String s = "";
////                try {
////                    SemanarioDocsBO sdbo = dao.getSemanarioDocs(doc.getIdSemanario());
////                    if (sdbo != null) {
////                        List<DocumentBO> l = sdbo.getDocumentsBO();
////                        for(DocumentBO o : l){
////                            sb.append(o.getDocumentName()).append(", ");
////                        }
////                        if (sb.toString().length() > 0) {
////                            s = sb.toString().substring(0, sb.toString().length() - 2);
////                        }
////                    }
////                } catch (Exception ex) { ex.printStackTrace();}
//                value = s;
//                break;
        }
        return value;
    }

}
