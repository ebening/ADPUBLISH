package com.adinfi.formateador.view;

import com.adinfi.formateador.bos.TemplateBO;
import com.adinfi.formateador.bos.TemplateModuleBO;
import com.adinfi.formateador.dao.TemplateDAO;
import com.adinfi.formateador.main.MainView;
import com.adinfi.formateador.util.GlobalDefines;
import com.adinfi.formateador.util.ThumbTemplate;
import com.adinfi.formateador.util.Utilerias;
import java.awt.BorderLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.pushingpixels.flamingo.api.common.popup.JPopupPanel;

/**
 *
 * @author Guillermo Trejo
 */
public final class PanelPlantillas extends JPopupPanel {

    private final ScrDocument scrDocument;

    /**
     * Creates new form PanelPlantillas
     *
     */
    public PanelPlantillas() {
        this.scrDocument = MainView.main.getScrDocument();
        initComponents();
        populatePanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanel = new javax.swing.JScrollPane();
        panelThumbTempl = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(550, 140));
        setPreferredSize(new java.awt.Dimension(550, 140));
        setLayout(new java.awt.BorderLayout());

        scrollPanel.setMinimumSize(new java.awt.Dimension(550, 140));
        scrollPanel.setPreferredSize(new java.awt.Dimension(550, 140));

        panelThumbTempl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        scrollPanel.setViewportView(panelThumbTempl);

        add(scrollPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    protected void populatePanel() {
        if (MainView.main.getScrDocument() != null
                && MainView.main.getScrDocument().getDocBO() != null) {

            int idDocType = MainView.main.getScrDocument().getDocBO().getIdDocType();
            MainView.main.getProgressBar().setIndeterminate(true);
            MainView.main.getProgressBar().setVisible(true);
            PanelPlantillas.PopulatePanelWorker worker = new PanelPlantillas.PopulatePanelWorker(idDocType);
            worker.execute();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelThumbTempl;
    private javax.swing.JScrollPane scrollPanel;
    // End of variables declaration//GEN-END:variables

    class PopulatePanelWorker extends SwingWorker<TemplateBO, TemplateBO> {

        private int idDocumentType;

        PopulatePanelWorker(int idDocumentType) {
            this.idDocumentType = idDocumentType;
        }

        @Override
        protected TemplateBO doInBackground() {
            try {
                TemplateDAO tempDAO = new TemplateDAO();
                final List<TemplateBO> lstTempBO = tempDAO.getTemplatesFromDocumentType(idDocumentType);
                if (lstTempBO == null) {
                    return null;
                }
                for (final TemplateBO tempBO : lstTempBO) {
                    if (tempBO == null) {
                        continue;
                    }

                    String fileName
                            = new StringBuilder(Utilerias.getFilePath(Utilerias.PATH_TYPE.THUMB_TEMPLATE_DIR))
                            .append(tempBO.getTemplateId())
                            .append(".")
                            .append(GlobalDefines.png).toString();

                    tempBO.setTemplatePath(fileName);
                    publish(tempBO);
                }
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
            return null;
        }

        @Override
        public void process(List<TemplateBO> chunks) {
            if (chunks == null) {
                return;
            }
            try {
                boolean addSepFP = true;
                for (int i = 0; i < chunks.size(); i++) {
                    try{
                        final TemplateBO tempBO = chunks.get(i);
                        
                        if(addSepFP && tempBO.isFirstPage() == false && i > 0){
                            PanelSeparatorThumb pst = new PanelSeparatorThumb();
                            panelThumbTempl.add(pst);
                            addSepFP = false;
                        }

                        /*ThumbTemplate thTemp = new ThumbTemplate();
                        thTemp.genThumbTemplate(tempBO.getTemplateId(), (short) 90, (short) 90);*/

                        PanelThumb pan = new PanelThumb(tempBO.getTemplateId(), PanelThumb.DEFAULT_WIDTH_PANEL_SIZE, PanelThumb.DEFAULT_HEIGHT_PANEL_SIZE, tempBO.getTemplatePath(), tempBO.getTemplateName());
                        pan.getButton().addMouseListener(new MouseAdapter() {

                            @Override
                            public void mouseClicked(MouseEvent me) {
                                if (me.getClickCount() == 2 ){//GlobalDefines.DEFAULT_CLICK_COUNT) {
                                    try {
                                        MainView.main.getProgressBar().setIndeterminate(true);
                                        MainView.main.getProgressBar().setVisible(true);
                                        TemplateBO tempBO_ = new TemplateDAO().getTemplate(tempBO.getTemplateId());
                                        AddModulesWorker worker = new AddModulesWorker(tempBO_);
                                        worker.execute();
                                    } catch (Exception ex) {
                                        Utilerias.showMessage(MainView.main, ex.getMessage(), JOptionPane.WARNING_MESSAGE);
                                        Utilerias.logger(getClass()).info(ex);
                                    }
                                }
                            }
                            
                            
                        });
                        
                        panelThumbTempl.add(pan);
                    } catch (Exception ex) {
                        Utilerias.logger(getClass()).error(ex);
                    }
                }
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
        }

        @Override
        protected void done() {
            try {
                PanelRefreshThumb prt = new PanelRefreshThumb();
                prt.getButton().addMouseListener(new MouseAdapter() {
                    
                    @Override
                    public void mouseClicked(MouseEvent me) {
                        if (me.getClickCount() == GlobalDefines.DEFAULT_CLICK_COUNT) {
                            try {
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        MainView.main.getProgressBar().setVisible(true);
                                    }
                                });
                                
                                TemplateDAO tDAO = new TemplateDAO();
                                List<TemplateBO> lstModTemp = tDAO.getTemplates();
                                for (TemplateBO temp : lstModTemp) {
                                    TemplateBO tempBO = tDAO.getTemplate(temp.getTemplateId());
                                    
                                    if(tempBO == null)
                                        continue;
                                    
                                    ThumbTemplate thTemp = new ThumbTemplate();
                                    thTemp.genThumbTemplate(tempBO.getTemplateId(), (short) 90, (short) 90);
                                }
                                
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        try {
                                            while (panelThumbTempl.getComponentCount() > 1) {                                    
                                                panelThumbTempl.remove(0);
                                            }
                                            panelThumbTempl.revalidate();
                                            panelThumbTempl.updateUI();
                                             
                                            PopulatePanelRedrawTempWorker workerRD = new PopulatePanelRedrawTempWorker(idDocumentType);
                                            MainView.main.getProgressBar().setVisible(true);
                                            MainView.main.getProgressBar().setIndeterminate(true);
                                            workerRD.execute();
                                          
                                        } catch (Exception ex) {
                                            Utilerias.logger(getClass()).error(ex);
                                        }
                                    }
                                });
                            } catch (Exception ex) {
                                Utilerias.logger(getClass()).info(ex);
                            } finally {
                                SwingUtilities.invokeLater(new Runnable() {

                                    @Override
                                    public void run() {
                                        MainView.main.getProgressBar().setVisible(false);
                                    }
                                });
                            }
                        }
                    }
                });
                panelThumbTempl.add(prt);
                panelThumbTempl.revalidate();
                panelThumbTempl.updateUI();
            } catch (Exception e) {
                Utilerias.logger(getClass()).error(e);
            } finally {
                MainView.main.getProgressBar().setVisible(false);
            }
        }
    }

    class AddModulesWorker extends SwingWorker<Integer, Integer> {

        protected Exception ex;
        protected TemplateBO tempBO;

        AddModulesWorker(TemplateBO tempBO) {
            this.tempBO = tempBO;
        }

        @Override
        protected Integer doInBackground() {
            List<TemplateModuleBO> lstModulesBO = tempBO.getModulesAsList();
            if (lstModulesBO == null) {
                return null;
            }
            ArrayList<Integer> moduleIdList = new ArrayList<>();
            for (final TemplateModuleBO moduleBO : lstModulesBO) {
                if (moduleBO == null) {
                    continue;
                }
                int moduleId = moduleBO.getModuleId();
                moduleIdList.add(moduleId);
                publish(moduleId);
            }
            //publish(moduleIdList);
            return null;
        }

        @Override
        public void process(List<Integer> chunks) {
            if (chunks == null) {
                return;
            }
            for (Integer i : chunks) {
                try {
                    if( !scrDocument.addModule(i, tempBO.getTemplateId()) )
                        break;
                } catch (UnsupportedOperationException e) {
                    this.ex = e;
                    break;
                }
            }
            //scrDocument.showFirstPage();
            //MainView.main.getMainPanel().updateUI();
        }

        @Override
        protected void done() {
            MainView.main.getProgressBar().setVisible(false);
            if (this.ex != null) {
                Utilerias.showMessage(MainView.main, ex.getMessage(), JOptionPane.WARNING_MESSAGE);
                Utilerias.logger(getClass()).info(ex);
            } else {
              //  MainView.main.setDocument(scrDocument);
            }
        }
    }
    
    class PopulatePanelRedrawTempWorker extends SwingWorker<TemplateBO, TemplateBO> {

        private int idDocumentType;

        PopulatePanelRedrawTempWorker(int idDocumentType) {
            this.idDocumentType = idDocumentType;
            System.out.println("documentType: " + this.idDocumentType);
        }

        @Override
        protected TemplateBO doInBackground() {
            try {
                TemplateDAO tempDAO = new TemplateDAO();
                final List<TemplateBO> lstTempBO = tempDAO.getTemplatesFromDocumentType(idDocumentType);
                if (lstTempBO == null) {
                    return null;
                }
                for (final TemplateBO tempBO : lstTempBO) {
                    if (tempBO == null) {
                        continue;
                    }

                    String fileName
                            = new StringBuilder(Utilerias.getFilePath(Utilerias.PATH_TYPE.THUMB_TEMPLATE_DIR))
                            .append(tempBO.getTemplateId())
                            .append(".")
                            .append(GlobalDefines.png).toString();

                    tempBO.setTemplatePath(fileName);
                    publish(tempBO);
                }
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
            return null;
        }

        @Override
        public void process(List<TemplateBO> chunks) {
            if (chunks == null) {
                return;
            }
            try {
                for (int i = 0; i < chunks.size(); i++) {
                    try{
                        final TemplateBO tempBO = chunks.get(i);

                        /*ThumbTemplate thTemp = new ThumbTemplate();
                        thTemp.genThumbTemplate(tempBO.getTemplateId(), (short) 90, (short) 90);*/

                        PanelThumb pan = new PanelThumb(tempBO.getTemplateId(), PanelThumb.DEFAULT_WIDTH_PANEL_SIZE, PanelThumb.DEFAULT_HEIGHT_PANEL_SIZE, tempBO.getTemplatePath(), tempBO.getTemplateName());
                        pan.getButton().addMouseListener(new MouseAdapter() {

                            @Override
                            public void mouseClicked(MouseEvent me) {
                                if (me.getClickCount() == 2){//GlobalDefines.DEFAULT_CLICK_COUNT) {
                                    try {
                                        MainView.main.getProgressBar().setIndeterminate(true);
                                        MainView.main.getProgressBar().setVisible(true);
                                        TemplateBO tempBO_ = new TemplateDAO().getTemplate(tempBO.getTemplateId());
                                        AddModulesWorker worker = new AddModulesWorker(tempBO_);
                                        worker.execute();
                                    } catch (Exception ex) {
                                        Utilerias.showMessage(MainView.main, ex.getMessage(), JOptionPane.WARNING_MESSAGE);
                                        Utilerias.logger(getClass()).info(ex);
                                    }
                                }
                            }
                        });
                        panelThumbTempl.add(pan, i);
                    } catch (Exception ex) {
                        Utilerias.logger(getClass()).error(ex);
                    }
                }
                panelThumbTempl.revalidate();
                panelThumbTempl.updateUI();
            } catch (Exception ex) {
                Utilerias.logger(getClass()).error(ex);
            }
        }

        @Override
        protected void done() {
            MainView.main.getProgressBar().setVisible(false);
        }
    }
}
